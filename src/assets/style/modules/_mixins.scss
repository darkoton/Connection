//< " RESPONSIVE VALUE " >=============================================================================================================>//
@mixin adaptiv-value($property, $startSize, $minSize, $type, $direction: null, $width: null) {
  $addSize: $startSize - $minSize;

  @if $direction== "vertical" {
    /* If responsive vertical */
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vh - 640px) / #{$maxHeight - 640}));
  } @else if $type==1 {
    /* If less than container */
    #{$property}: $startSize + px;

    @media (max-width: #{($width or $maxWidthContainer) + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{($width or $maxWidthContainer) - 320}));
    }
  } @else if $type==2 {
    /* If there is more container */
    #{$property}: $startSize + px;

    @media (min-width: #{($width or $maxWidthContainer) + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  } @else {
    /* Always */
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

//< " RESPONSIVE VALUE WITH OF A SPECIFIC SCREEN WIDTH " >=============================================================================================================>//

//< " RESPONSIVE PROPERY WITH DOUBLE PARAMS" >=============================================================================================================>//
// H - horizontal
// V - vertical
@mixin adaptiv-indent($property, $startSizeV, $minSizeV, $startSizeH, $minSizeH, $type) {
  $addSizeV: $startSizeV - $minSizeV;
  $addSizeH: $startSizeH - $minSizeH;

  @if $type==1 {
    /* If less than container */
    #{property}: $startSizeV + px $startSizeH + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{property}: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidthContainer - 320}))
        calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  } @else if $type==2 {
    /* If there is more container */
    #{property}: $startSizeV + px $startSizeH + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{property}: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidth - 320}))
        calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  } @else {
    /* Always */
    #{property}: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidth - 320}))
      calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidth - 320}));
  }
}

//< " BUTTON GRADIENT " >
@mixin button-gradient($dir: 0deg, $from, $to, $borderRadius: 0px, $opacity: 1) {
  position: relative;
  background: transparent;
  overflow: hidden;
  z-index: 0;
  border-radius: $borderRadius;

  &::before {
    content: "";
    position: absolute;
    z-index: -1;
    inset: 0px;
    background: linear-gradient($dir, $from 2.29%, color-mix(in srgb, $from, $to), 49.7%, $to 68.56%);
    padding: 2px;
    border-radius: $borderRadius;
    // -webkit-mask: linear-gradient(rgb(255, 255, 255) 0px, rgb(255, 255, 255) 0px) content-box content-box, linear-gradient(rgb(255, 255, 255) 0px, rgb(255, 255, 255) 0px);
    // -webkit-mask-composite: xor;
    transition: all 0.3s ease 0s;
  }
  &::after {
    content: "";
    background: linear-gradient($dir, $from 2.29%, color-mix(in srgb, $from, $to) 49.7%, $to 68.56%);
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    z-index: -1;
    transition: all 0.3s ease 0s;
    opacity: $opacity;
  }

  @media (any-hover: hover) {
    cursor: pointer;
    transition: all 0.3s ease 0s;
    &:hover {
      &::after {
        @if $opacity==1 {
          opacity: 0;
        } @else if $opacity==0 {
          opacity: 1;
        }
      }
    }
  }
}

//< " FONT GRADIENT " >
@mixin font-gradient($dir, $colors...) {
  background: -webkit-linear-gradient($dir, $colors);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

//< " STYLE SCROLLBAR " >
@mixin scrollbars($size: 10px, $foreground-color: #999, $background-color: #333, $border-radius: 0px) {
  // For Chrome & Safari

  &::-webkit-scrollbar {
    width: $size;
    height: $size;
  }
  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
    border-radius: $border-radius;
  }
  &::-webkit-scrollbar-track {
    background: $background-color;
  }

  // Standard version (Firefox only for now)
  @-moz-document url-prefix() {
    scrollbar-color: $foreground-color $background-color;
  }
}
